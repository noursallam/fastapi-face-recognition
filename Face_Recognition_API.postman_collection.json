{
	"info": {
		"_postman_id": "face-recognition-api-2025",
		"name": "Face Recognition API",
		"description": "Complete API collection for Face Recognition System with OpenCV\n\n## üéØ About This API\nA Face ID-like authentication system using OpenCV and FastAPI. Features include:\n- Face registration with webcam capture\n- Real-time face verification\n- User management (list/delete users)\n- Verification logging to SQLite database\n- OpenCV + Histogram comparison for recognition\n\n## üöÄ Getting Started\n1. Start the FastAPI server: `python main.py`\n2. Server runs on: `http://localhost:8000`\n3. Web interface: `http://localhost:8000`\n4. API docs: `http://localhost:8000/docs`\n\n## üìã Test Sequence\n1. **GET /** - View web interface\n2. **POST /register/{name}** - Register new faces\n3. **GET /users** - Check registered users\n4. **GET /verify** - Start verification mode (logs successful verifications)\n5. **GET /verifications/today** - View today's verification logs\n6. **GET /verifications/user/{name}** - View user verification history\n7. **DELETE /users/{name}** - Clean up test data\n\n## üÜï NEW Features\n- ‚úÖ Verification logging to SQLite database\n- ‚úÖ Daily verification tracking\n- ‚úÖ User verification history\n- ‚úÖ Real-time verification status\n\n## ‚ö†Ô∏è Important Notes\n- Ensure webcam is connected and working\n- Good lighting improves accuracy\n- Register multiple samples for better recognition\n- During registration: SPACE to capture, ESC to cancel\n- During verification: ESC to exit\n- Successful verifications are automatically logged to database",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "face-recognition-system"
	},
	"item": [
		{
			"name": "üè† Home Page",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is HTML\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");",
							"});",
							"",
							"pm.test(\"Response contains Face Recognition System title\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Face Recognition System\");",
							"});",
							"",
							"pm.test(\"Response contains API endpoints info\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"/register\");",
							"    pm.expect(pm.response.text()).to.include(\"/verify\");",
							"    pm.expect(pm.response.text()).to.include(\"/users\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "üè† **Home Page Endpoint**\n\nReturns the main web interface with:\n- System overview and status\n- Available API endpoints\n- Usage instructions\n- Current registered users count\n- Interactive web interface\n\n**Expected Response:**\n- HTML page with complete interface\n- Status: 200 OK\n- Content-Type: text/html"
			},
			"response": []
		},
		{
			"name": "üë• Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('registered_users');",
							"    pm.expect(jsonData).to.have.property('total_count');",
							"    pm.expect(jsonData).to.have.property('recognition_method');",
							"});",
							"",
							"pm.test(\"Recognition method is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.recognition_method).to.eql('OpenCV + Histogram Comparison');",
							"});",
							"",
							"pm.test(\"Users array matches count\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.registered_users.length).to.eql(jsonData.total_count);",
							"});",
							"",
							"// Store user count for other tests",
							"pm.globals.set(\"current_user_count\", pm.response.json().total_count);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "üë• **Get All Registered Users**\n\nRetrieve information about all registered users in the system.\n\n**Response includes:**\n- `registered_users`: Array of user names\n- `total_count`: Number of registered users\n- `recognition_method`: Current recognition algorithm\n\n**Example Response:**\n```json\n{\n  \"registered_users\": [\"john_doe\", \"jane_smith\"],\n  \"total_count\": 2,\n  \"recognition_method\": \"OpenCV + Histogram Comparison\"\n}\n```\n\n**Use Cases:**\n- Check system status before testing\n- Verify registration success\n- Monitor user database\n- Clean up test data"
			},
			"response": []
		},
		{
			"name": "üìù Register New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Successful registration\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.status).to.eql('success');",
							"        pm.expect(jsonData).to.have.property('message');",
							"        pm.expect(jsonData.message).to.include('Successfully registered');",
							"    });",
							"} else if (pm.response.code === 400) {",
							"    pm.test(\"Registration error handled\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('detail');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a unique test user name",
							"const timestamp = new Date().getTime();",
							"const testUserName = `test_user_${timestamp}`;",
							"pm.globals.set(\"test_user_name\", testUserName);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/register/{{test_user_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"register",
						"{{test_user_name}}"
					]
				},
				"description": "üìù **Register New User Face**\n\n‚ö†Ô∏è **IMPORTANT: This endpoint requires webcam interaction!**\n\nRegisters a new user's face in the system using webcam capture.\n\n**Process:**\n1. Opens webcam window\n2. Detects faces in real-time\n3. User presses SPACE to capture (3 times)\n4. System extracts and saves face features\n5. ESC to cancel registration\n\n**Path Parameter:**\n- `name`: Username for registration (must be unique)\n\n**Success Response (200):**\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Successfully registered {name} with 3 face samples\"\n}\n```\n\n**Error Responses:**\n- `400`: Name already exists or camera issues\n- `400`: Empty/invalid name\n\n**Testing Tips:**\n- Ensure webcam is connected\n- Good lighting conditions\n- Face the camera directly\n- Auto-generates unique test usernames\n\n**Manual Testing:**\n1. Click Send\n2. Camera window opens\n3. Position face in frame\n4. Press SPACE 3 times to capture\n5. Registration completes automatically"
			},
			"response": []
		},
		{
			"name": "üîç Start Face Verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 500\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 500]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Verification completed successfully\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.status).to.eql('success');",
							"        pm.expect(jsonData.message).to.include('Verification completed');",
							"    });",
							"} else if (pm.response.code === 500) {",
							"    pm.test(\"Camera error handled\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('detail');",
							"        pm.expect(jsonData.detail).to.include('camera');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"verify"
					]
				},
				"description": "üîç **Start Face Verification**\n\n‚ö†Ô∏è **IMPORTANT: This endpoint requires webcam interaction!**\n\nStarts real-time face verification using the webcam.\n\n**Process:**\n1. Opens webcam window for verification\n2. Detects faces in real-time\n3. Compares with registered users\n4. Shows access granted/denied status\n5. Displays similarity scores\n6. ESC to exit verification mode\n\n**Success Response (200):**\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"Verification completed\"\n}\n```\n\n**Error Response (500):**\n```json\n{\n  \"detail\": \"Could not open camera\"\n}\n```\n\n**Real-time Display:**\n- Green rectangle: Access Granted (recognized user)\n- Red rectangle: Access Denied (unknown user)\n- User name and similarity score\n- Registered users count\n\n**Testing Requirements:**\n- At least one registered user\n- Working webcam\n- Good lighting\n\n**Manual Testing:**\n1. Register a user first\n2. Click Send to start verification\n3. Camera window opens\n4. Show your face to camera\n5. Observe recognition results\n6. Press ESC to exit\n\n**Verification Logic:**\n- Similarity threshold: 0.7\n- Method: Histogram comparison\n- Real-time processing"
			},
			"response": []
		},
		{
			"name": "ÔøΩ Today's Verifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('date');",
							"    pm.expect(jsonData).to.have.property('total_verifications');",
							"    pm.expect(jsonData).to.have.property('verifications');",
							"});",
							"",
							"pm.test(\"Verifications is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.verifications).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Date is today\", function () {",
							"    const jsonData = pm.response.json();",
							"    const today = new Date().toISOString().split('T')[0];",
							"    pm.expect(jsonData.date).to.eql(today);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/verifications/today",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"verifications",
						"today"
					]
				},
				"description": "üìä **Get Today's Verification Logs**\n\nRetrieve all successful face verifications that occurred today.\n\n**Response includes:**\n- `date`: Today's date\n- `total_verifications`: Count of verifications today\n- `verifications`: Array of verification records\n\n**Each verification record contains:**\n- `user_name`: Name of verified user\n- `verification_time`: Exact timestamp of verification\n- `similarity_score`: Face matching confidence score\n\n**Example Response:**\n```json\n{\n  \"date\": \"2025-08-15\",\n  \"total_verifications\": 3,\n  \"verifications\": [\n    {\n      \"user_name\": \"john_doe\",\n      \"verification_time\": \"2025-08-15 14:30:25.123456\",\n      \"similarity_score\": 0.85\n    }\n  ]\n}\n```\n\n**Use Cases:**\n- Daily attendance tracking\n- Security audit logs\n- System usage monitoring\n- Verification analytics\n\n**Notes:**\n- Only successful verifications are logged\n- Each user can only appear once per day\n- Data is stored in SQLite database\n- Ordered by most recent first"
			},
			"response": []
		},
		{
			"name": "üë§ User Verification History",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has required fields\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('user_name');",
							"        pm.expect(jsonData).to.have.property('has_verified_today');",
							"        pm.expect(jsonData).to.have.property('verification_history');",
							"    });",
							"    ",
							"    pm.test(\"Verification history is an array\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.verification_history).to.be.an('array');",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.test(\"User not found error\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.detail).to.eql('User not found');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/verifications/user/{{test_user_name}}?days=30",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"verifications",
						"user",
						"{{test_user_name}}"
					],
					"query": [
						{
							"key": "days",
							"value": "30"
						}
					]
				},
				"description": "üë§ **Get User Verification History**\n\nRetrieve verification history for a specific registered user.\n\n**Path Parameter:**\n- `user_name`: Name of the registered user\n\n**Query Parameter:**\n- `days`: Number of days of history to retrieve (default: 30)\n\n**Success Response (200):**\n```json\n{\n  \"user_name\": \"john_doe\",\n  \"has_verified_today\": true,\n  \"days_requested\": 30,\n  \"total_records\": 15,\n  \"verification_history\": [\n    {\n      \"verification_date\": \"2025-08-15\",\n      \"verification_time\": \"2025-08-15 14:30:25.123456\",\n      \"similarity_score\": 0.85\n    }\n  ]\n}\n```\n\n**Error Response (404):**\n```json\n{\n  \"detail\": \"User not found\"\n}\n```\n\n**Features:**\n- Historical verification tracking\n- Today's verification status\n- Configurable time range\n- Ordered by most recent first\n\n**Use Cases:**\n- Individual attendance reports\n- User activity analysis\n- Verification pattern tracking\n- Security audit for specific users\n\n**Notes:**\n- Only shows successful verifications\n- Limited to registered users only\n- Data persisted across application restarts"
			},
			"response": []
		},
		{
			"name": "‚úÖ Check Verification Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has required fields\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('user_name');",
							"        pm.expect(jsonData).to.have.property('date');",
							"        pm.expect(jsonData).to.have.property('has_verified_today');",
							"        pm.expect(jsonData).to.have.property('status');",
							"    });",
							"    ",
							"    pm.test(\"Status matches verification boolean\", function () {",
							"        const jsonData = pm.response.json();",
							"        const expectedStatus = jsonData.has_verified_today ? 'verified' : 'not_verified';",
							"        pm.expect(jsonData.status).to.eql(expectedStatus);",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.test(\"User not found error\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.detail).to.eql('User not found');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/verifications/status/{{test_user_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"verifications",
						"status",
						"{{test_user_name}}"
					]
				},
				"description": "‚úÖ **Check User Verification Status**\n\nQuick check to see if a specific user has verified today.\n\n**Path Parameter:**\n- `user_name`: Name of the registered user to check\n\n**Success Response (200):**\n```json\n{\n  \"user_name\": \"john_doe\",\n  \"date\": \"2025-08-15\",\n  \"has_verified_today\": true,\n  \"status\": \"verified\"\n}\n```\n\n**Error Response (404):**\n```json\n{\n  \"detail\": \"User not found\"\n}\n```\n\n**Status Values:**\n- `verified`: User has successfully verified today\n- `not_verified`: User has not verified today\n\n**Use Cases:**\n- Quick attendance check\n- Real-time status dashboard\n- Access control decisions\n- Automated notifications\n- Integration with other systems\n\n**Features:**\n- Fast single-user lookup\n- Today-only focus\n- Boolean and text status\n- Minimal response payload\n\n**Notes:**\n- Only works for registered users\n- Resets daily (midnight)\n- Based on successful face verification\n- Useful for attendance systems"
			},
			"response": []
		},
		{
			"name": "ÔøΩüóëÔ∏è Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"User deleted successfully\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.status).to.eql('success');",
							"        pm.expect(jsonData.message).to.include('deleted successfully');",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.test(\"User not found error\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData.detail).to.eql('User not found');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{test_user_name}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{test_user_name}}"
					]
				},
				"description": "üóëÔ∏è **Delete Registered User**\n\nRemoves a registered user and their face data from the system.\n\n**Path Parameter:**\n- `name`: Username to delete (case-sensitive)\n\n**Success Response (200):**\n```json\n{\n  \"status\": \"success\",\n  \"message\": \"User {name} deleted successfully\"\n}\n```\n\n**Error Response (404):**\n```json\n{\n  \"detail\": \"User not found\"\n}\n```\n\n**What Gets Deleted:**\n- User name from registered list\n- Associated face feature data\n- Updates face_data.pkl file\n\n**Use Cases:**\n- Clean up test data\n- Remove old users\n- User management\n- Data privacy compliance\n\n**Testing:**\n- Uses the same test user name from registration\n- Test both existing and non-existing users\n- Verify data persistence after deletion\n\n**Security Note:**\n- No authentication required (demo system)\n- Permanent deletion (no recovery)\n- Immediate effect on verification"
			},
			"response": []
		},
		{
			"name": "üìä API Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API is responsive\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Server is running\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Face Recognition System\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "üìä **API Health Check**\n\nQuick health check to verify the API server is running and responsive.\n\n**Purpose:**\n- Verify server is running\n- Check response time\n- Confirm API accessibility\n- Validate before running other tests\n\n**Expected:**\n- Response time < 5 seconds\n- Status: 200 OK\n- Contains system title\n\n**Run this first** before testing other endpoints."
			},
			"response": []
		},
		{
			"name": "üìñ API Documentation",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/docs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"docs"
					]
				},
				"description": "üìñ **Interactive API Documentation**\n\nAccess FastAPI's automatic interactive documentation (Swagger UI).\n\n**Features:**\n- Interactive API explorer\n- Try endpoints directly\n- View request/response schemas\n- Authentication testing\n- Real-time API testing\n\n**Alternative Documentation:**\n- ReDoc format: `{{base_url}}/redoc`\n- OpenAPI JSON: `{{base_url}}/openapi.json`\n\n**Benefits:**\n- No Postman required for basic testing\n- Built-in validation\n- Automatic schema generation\n- Live API exploration"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "global-prerequest",
				"exec": [
					"// Global pre-request script",
					"console.log('üöÄ Starting Face Recognition API Test');",
					"console.log('üìÖ Test Run:', new Date().toISOString());",
					"console.log('üîó Base URL:', pm.variables.get('base_url'));",
					"",
					"// Set common headers",
					"pm.request.headers.add({",
					"    key: 'User-Agent',",
					"    value: 'Postman-Face-Recognition-Tests/1.0'",
					"});"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "global-test",
				"exec": [
					"// Global test script",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000);",
					"});",
					"",
					"// Log response for debugging",
					"console.log('‚úÖ Response Status:', pm.response.status);",
					"console.log('‚è±Ô∏è Response Time:', pm.response.responseTime + 'ms');"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the Face Recognition API server"
		},
		{
			"key": "test_user_name",
			"value": "test_user_12345",
			"type": "string",
			"description": "Dynamically generated test user name for registration/deletion tests"
		}
	]
}
